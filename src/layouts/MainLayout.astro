---

/**
 * MainLayout 
 * Wrapper layout with all meta data for pages.
 */
const {title, activePage} = Astro.props;

//Pages Styles
let activeNavCss = 'block py-2 pl-3 pr-4 text-black bg-[#3BA576] rounded md:bg-transparent md:text-[#3BA576] md:p-0';
let navCSS = 'block py-2 pl-3 pr-4 text-white rounded hover:bg-[#3BA576] md:hover:bg-transparent md:border-0 md:hover:text-[#3BA576] md:p-0   dark:hover:bg-[#3BA576]  ';

//Style ref values for each navigation item
var homeCSS = '';
var aboutCSS = '';
var contactCSS = '';
var resumeCSS = '';

//Checking which page we are on by checking the incoming
if(activePage === "home") {
	homeCSS = activeNavCss;
	aboutCSS = navCSS;
	contactCSS = navCSS;
	resumeCSS = navCSS;
} else if(activePage === "about") {
	homeCSS = navCSS;
	aboutCSS = activeNavCss;
	contactCSS = navCSS;
	resumeCSS = navCSS;
} else if(activePage === "contact") {
	homeCSS = navCSS;
	aboutCSS = navCSS;
	contactCSS = activeNavCss;
	resumeCSS = navCSS;
} else if(activePage === "resume" ){
	homeCSS = navCSS;
	aboutCSS = navCSS;
	contactCSS = navCSS;
	resumeCSS = activeNavCss;
}

---
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<meta name="description" content="Discover the exceptional software development skills of Francisco Paliouras,
		 showcasing a diverse portfolio of innovative projects. Explore thier commitment to excellence in every project. 
		 Please feel free to reach out with opportunities or any other inqueries.">
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body class="text-white">   
		<canvas id="canvas" ></canvas>
		<nav class="border-gray-200 px-2 sm:px-4 py-2.5 rounded">
			<div  class="container flex flex-wrap items-center justify-end mx-auto">
				<!-- Hamburger Menu -->
				<button id="nav_btn" data-collapse-toggle="navbar-default" type="button" class="inline-flex items-center p-2 ml-3 text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600" aria-controls="navbar-default" aria-expanded="false">
					<span class="sr-only">Open main menu</span>
					<svg class="w-6 h-6" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path></svg>
				</button>
					<!-- ----DEFAULT WEB NAVIGATION---- -->
				<div class="hidden w-full md:block md:w-auto" id="navbar-default">
					<ul class="flex flex-col p-4 mt-4 border border-gray-100 rounded-lg md:flex-row md:space-x-8 md:mt-0 md:text-sm md:font-medium md:border-0 bg-[#081710]">
					<li>
						<a href="/" class={homeCSS} aria-current="page">Home</a>
					</li>
					<li>
						<a href="/about" class={aboutCSS}>About</a>
					</li>
					<li>
						<a href="/contact" class={contactCSS}>Contact Me</a>
					</li>
					<li>
						<a href="/resume" class={resumeCSS}>Resume</a>
					</li>
					</ul>
				</div>
				<!-- ----DEFAULT MOBILE NAVIGATION---- -->
				<div class="md:hidden transition-transform w-[90%] overflow-hidden scale-y-0 absolute top-10 mx-5" id="navbar-mobile">
					<ul class="flex flex-col p-4 mt-4 border border-[#3BA576] rounded-lg bg-[#081710] md:flex-row md:space-x-8 md:mt-0 md:text-sm md:font-medium md:border-0">
					<li>
						<a href="/" class={homeCSS} aria-current="page">Home</a>
					</li>
					<li>
						<a href="/about" class={aboutCSS}>About</a>
					</li>
					<li>
						<a href="/contact" class={contactCSS}>Contact Me</a>
					</li>
					<li>
						<a href="/resume" class={resumeCSS}>Resume</a>
					</li>
					</ul>
				</div>
			</div>
		</nav>
		<!-- END NAVBAR -->
        <slot/>
	</body>
</html>
<script>
	/**
	 * Hambuergur Menu Logic for Mobile menu
	 */
	var navBtn = document.getElementById('nav_btn');
	var menu = document.getElementById('navbar-mobile');
	navBtn.addEventListener('click', () => {
		menu.classList.toggle('scale-y-0');
		menu.classList.toggle('scale-y-100');
	});


	/**
	 * Background animation
	 */
	 var tileSize = 7;
	// a higher fade factor will make the characters fade quicker
	var fadeFactor = .75;
	
	var canvas;
	var ctx;
	
	var columns = [];
	var maxStackHeight;
	
	function init()
	{
		canvas = document.getElementById( 'canvas' );
		ctx = canvas.getContext( '2d' );
		ctx.fillStyle = "#081710"
	
		// https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver
		const resizeObserver = new ResizeObserver( entries =>
		{
			for ( let entry of entries )
			{
				if ( entry.contentBoxSize )
				{
					// Firefox implements `contentBoxSize` as a single content rect, rather than an array
					const contentBoxSize = Array.isArray( entry.contentBoxSize ) ? entry.contentBoxSize[0] : entry.contentBoxSize;
	
					canvas.width = contentBoxSize.inlineSize;
					canvas.height = window.innerHeight;
	
					initMatrix();
				}
			}
		} );
	
		// observe the size of the document
		resizeObserver.observe( document.documentElement );
	
		// start the main loop
		tick();
	}
	
	function initMatrix()
	{
		columns = [];
	
		maxStackHeight = Math.ceil(canvas.height/tileSize);
	
		// divide the canvas into columns
		for ( let i = 0 ; i < canvas.width/tileSize ; ++i )
		{
			var column = {};
			// save the x position of the column
			column.x = i*tileSize;
			// create a random stack height for the column
			column.stackHeight = 10+Math.random()*maxStackHeight;
			// add a counter to count the stack height
			column.stackCounter = 0;
			// add the column to the list
			columns.push( column );
		}
	}
	
	function draw(){
		// // draw a semi transparent black rectangle on top of the scene to slowly fade older characters
		// ctx.fillStyle = "rgb(8,23,16 )";
		// ctx.fillRect( 0 , 0 , canvas.width , canvas.height );
		
		//draw a semi transparent black rectangle on top of the scene to slowly fade older characters
		ctx.fillStyle = "rgba( 8,23,16 , "+fadeFactor+" )";
		ctx.fillRect( 0 , 0 , canvas.width , canvas.height );
	
		ctx.font = (tileSize-2)+"px monospace";
		ctx.fillStyle = "rgb(59, 165, 118 )";
		for ( let i = 0 ; i < columns.length ; ++i )
		{
			// pick a random ascii character (change the 94 to a higher number to include more characters)
			var randomCharacter = String.fromCharCode( 33+Math.floor(Math.random()*94) );
			ctx.fillText( randomCharacter , columns[i].x , columns[i].stackCounter*tileSize+tileSize );
	
			// if the stack is at its height limit, pick a new random height and reset the counter
			if ( ++columns[i].stackCounter >= columns[i].stackHeight )
			{
				columns[i].stackHeight = 10+Math.random()*maxStackHeight;
				columns[i].stackCounter = 0;
			}
		}
	}
	
	// MAIN LOOP
	function tick() 
	{    
		draw();
		setTimeout( tick , 50 );
	}
	
	var b_isFullscreen = false;
	
	function updateTileSize()
	{
		tileSize = Math.min( Math.max( document.getElementById("tileSize").value , 10 ) , 100 );
		initMatrix();
	}
	
	function updateFadeFactor()
	{
		fadeFactor = Math.min( Math.max( document.getElementById("fadeFactor").value , 0.0 ) , 1.0 );
		initMatrix();
	}
	//Call animation
	window.addEventListener("load", (event) => {
		init();
	});


</script>

<style is:global>
	#canvas{
		display:block; 
		margin:0 auto;
		position: fixed;
		z-index: -100;
		background-color: #081710;
		height: 100%;
	}


	/* GLOBAL LOADING ANIMATION FOR ALL PAGES */
	.load {
		animation-duration: 2s;
		animation-name: fade-in-load;
		animation-timing-function: cubic-bezier(0.165, 0.84, 0.44, 1);
	}

	@keyframes fade-in-load {
		from {
			opacity: 0;
			transform: translateY(100px);
		}

		to {
			opacity: 1;
			transform: translateY(0);
		}
	}
</style>